name: Continuous Integration

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest

    # Give the default GITHUB_TOKEN write permission to commit and push, comment
    # issues & post new PR; remove the ones you do not need
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v5

      # MegaLinter
      - name: MegaLinter

        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/latest/flavors/
        uses: oxsecurity/megalinter/flavors/javascript@v9.1.0

        id: ml

        # All available variables are described in documentation
        # https://megalinter.io/latest/configuration/
        # https://megalinter.io/latest/config-variables/
        env:
          VALIDATE_ALL_CODEBASE: >-
            ${{
              github.event_name == 'push' &&
              contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)
            }}

          REPOSITORY_TRIVY_ARGUMENTS: --format=sarif --severity=CRITICAL,HIGH --exit-code=1
          APPLY_FIXES_EVENT: none

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          include-hidden-files: "true"
          path: |
            megalinter-reports
            mega-linter.log

      # Set APPLY_FIXES_IF var for use in future steps
      - name: Set APPLY_FIXES_IF var
        run: |
          printf 'APPLY_FIXES_IF=%s\n' "${{
            steps.ml.outputs.has_updated_sources == 1 &&
            (
              env.APPLY_FIXES_EVENT == 'all' ||
              env.APPLY_FIXES_EVENT == github.event_name
            ) &&
            (
              github.event_name == 'push' ||
              github.event.pull_request.head.repo.full_name == github.repository
            )
          }}" >> "${GITHUB_ENV}"

      # Set APPLY_FIXES_IF_* vars for use in future steps
      - name: Set APPLY_FIXES_IF_* vars
        run: |
          printf 'APPLY_FIXES_IF_PR=%s\n' "${{
            env.APPLY_FIXES_IF == 'true' &&
            env.APPLY_FIXES_MODE == 'pull_request'
          }}" >> "${GITHUB_ENV}"
          printf 'APPLY_FIXES_IF_COMMIT=%s\n' "${{
            env.APPLY_FIXES_IF == 'true' &&
            env.APPLY_FIXES_MODE == 'commit' &&
            (!contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref))
          }}" >> "${GITHUB_ENV}"

      # Create pull request if applicable
      # (for now works only on PR from same repository, not from forks)
      - name: Create Pull Request with applied fixes
        uses: peter-evans/create-pull-request@v7
        id: cpr
        if: env.APPLY_FIXES_IF_PR == 'true'
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          title: "[MegaLinter] Apply linters automatic fixes"
          labels: bot

      - name: Create PR output
        if: env.APPLY_FIXES_IF_PR == 'true'
        run: |
          echo "PR Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "PR URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # Push new commit if applicable
      # (for now works only on PR from same repository, not from forks)
      - name: Prepare commit
        if: env.APPLY_FIXES_IF_COMMIT == 'true'
        run: sudo chown -Rc $UID .git/

      - name: Commit and push applied linter fixes
        uses: stefanzweifel/git-auto-commit-action@v7
        if: env.APPLY_FIXES_IF_COMMIT == 'true'
        with:
          branch: >-
            ${{
              github.event.pull_request.head.ref ||
              github.head_ref ||
              github.ref
            }}
          commit_message: "[MegaLinter] Apply linters fixes"
          commit_user_name: megalinter-bot
          commit_user_email: 129584137+megalinter-bot@users.noreply.github.com

  # Build Docker image
    # CodeQL SAST - Deep security analysis
    # reference: https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning?learn=code_security_actions&learnProduct=code-security
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: javascript-typescript
          # Optional: Add custom config
          # config-file: ./.github/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        id: analyze
        with:
          category: "/language:javascript-typescript"
        # Auto-uploads to GitHub Security tab with security-events: write


  build:
    name: Build Production Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout the code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production Docker image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./app
          file: ./app/Dockerfile
          target: production
          tags: tech-challenge-app:production
          push: false
          load: true
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      - name: Run Trivy image scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'tech-challenge-app:production'
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-image.sarif
          category: container-scan

      - name: Upload Trivy SARIF as Artifact (optional)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-image.sarif
          path: trivy-image.sarif
          retention-days: 7

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    #needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          echo "MONGO_INITDB_ROOT_USERNAME=test" >> $GITHUB_ENV
          echo "MONGO_INITDB_ROOT_PASSWORD=test" >> $GITHUB_ENV
          echo "MONGO_INITDB_DATABASE=tech_challenge_test" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production test Docker image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ./app
          file: ./app/Dockerfile
          target: test
          tags: tech-challenge-app:test
          push: false
          load: true
          platforms: linux/amd64
          build-args: |
            NODE_ENV=test
      
      - name: Start MongoDB
        run: |
          docker run -d \
            --name mongodb \
            --network test-network \
            -e MONGO_INITDB_ROOT_USERNAME=test \
            -e MONGO_INITDB_ROOT_PASSWORD=test \
            -e MONGO_INITDB_DATABASE=tech_challenge_test \
            mongo:7.0
      
      - name: Wait for MongoDB to be ready
        run: |
          timeout 60 bash -c 'until docker exec tech-challenge-mongodb mongosh --eval "db.runCommand({ ping: 1 })" --quiet; do sleep 2; done'
      
      - name: Run E2E tests in container
        run: |
          docker run --rm \
            --network test-network \
            -e MONGO_INITDB_ROOT_USERNAME=test \
            -e MONGO_INITDB_ROOT_PASSWORD=test \
            -e MONGO_INITDB_DATABASE=tech_challenge_test \
            tech-challenge-app:test \
            pnpm test:e2e
      
      - name: Cleanup
        if: always()
        run: |
          docker stop tech-challenge-mongodb || true
          docker rm tech-challenge-mongodb || true
          docker network rm test-network || true